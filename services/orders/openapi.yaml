openapi: 3.0.0
info:
  title: Orders API
  description: API for managing orders, ensuring cart validation, inventory checks, and correct order processing.
  version: 1.0.0

paths:
  /api/orders:
    get:
      summary: Retrieve all orders
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
        - name: sort_by
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Sorting order (asc or desc)
          required: false
          schema:
            type: string
            enum: [asc, desc]
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "400":
          description: Invalid request

    post:
      summary: Place a new order
      description: |
        Creates a new order from the cart.
        - **Checks if the cart exists before placing an order**
        - **Verifies product inventory before order creation**
        - **Stores only `{ productId, quantity }` in the order**
        - **Calculates price dynamically**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: The ID of the user placing the order
                cart_items:
                  type: array
                  description: The list of products in the cart
                  items:
                    type: object
                    properties:
                      product_id:
                        type: string
                        description: The product ID (must exist in `/api/products`)
                      quantity:
                        type: integer
                        minimum: 1
                        description: The quantity of the product
                status:
                  type: string
                  enum: [pending]
                  description: Orders always start in "pending" status.
              required:
                - user_id
                - cart_items
                - status
      responses:
        "201":
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid request (e.g., empty cart, insufficient stock)
        "404":
          description: User or product not found

  /api/orders/{order_id}:
    get:
      summary: Retrieve an order by ID
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Order details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found

    put:
      summary: Update order status
      description: |
        Updates the status of an existing order.
        - **Only allows valid status transitions:**
          - `pending → confirmed`
          - `confirmed → shipped`
          - `shipped → delivered`
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [confirmed, shipped, delivered]
                  description: |
                    - `confirmed` → Inventory is updated
                    - `shipped` → The order is prepared for delivery
                    - `delivered` → The order is completed
              required:
                - status
      responses:
        "200":
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid status transition
        "404":
          description: Order not found

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: string
          description: Unique order identifier
        user_id:
          type: string
          description: The ID of the user who placed the order
        cart_items:
          type: array
          description: The items included in the order
          items:
            type: object
            properties:
              productId:
                type: string
                description: The product ID
              quantity:
                type: integer
                description: The quantity ordered
        total_price:
          type: number
          description: Total price calculated dynamically from product prices
        status:
          type: string
          enum: [pending, confirmed, shipped, delivered]
          description: Order status
        createdAt:
          type: string
          format: date-time
          description: Order creation timestamp
